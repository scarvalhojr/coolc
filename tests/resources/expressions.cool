class A {
    a: Int <- 1 + 2;
    b: Int <- 3 - 4;
    c: Int <- 5 * 6;
    d: Int <- 7 / 8;
    e: Int <- 1 + 2 * ~ 3 + 4 / 5 - (6 + ~ 7) * 8 * (9) + 10 * ~ (11 / (12 - (13 + 14)));
    f: Int <- (((1 + 2) * (~ 3 - 4)) / ((5 + 6) * (7 - 8))) * ~ (((9 - 10) * (~ 11 + 12)) / ((13 / (~ 14)) * (15 - 16)));
    g: Bool <- 2 * 3 <= ~ 4 + 9;
    h: Bool <- 10 / ~ 2 - 3 < 7 + 2 * 4;
    i: Bool <- not not (5 - 2) * ~ 3 - 4 = 10 + ~ (15 - 8) / 2;
    j: Bool <- not not isvoid obj;
    k: Bool
        <-
        isvoid (
            obj1
                <-
                    obj2
                        <-
                            obj3
                                <-
                                    obj4);
    l(): L { l };
    m(): Bool { true };
    n(a: Int): Int { 0 };
    o(a: A, b: B, c: C): D { 1 + 2 };
    p: Object <- method();
    q: Int <-
        method
        (
            1,
            "param",
            true
        );
    r: R <- obj
        .
        method
        (
        )
        ;
    s: S <- 1 + 2 . m();
    t: S <- (1 + 2). m();
    u: U
        <-
        o
        @
        O
        .
        a
        (
            0
        )
        .
        b
        (
            true,
            ""
        )
        @
        C
        .
        c
        (
            a,
            b,
            2
        )
        ;
    v: V <- o
        @
        O
        .
        a
        (
            1,
            "param"
        )
        @
        B
        .
        b
        (
            true
        )
        .
        c
        (
            self
            @
            Object
            .
            p
            (
                q
                (
                    false
                )
                .
                r
                (
                    2
                )

            )
        );
    w: W <- self@Object.a()@A.b().c();
    add_if: X <- if true then 0 else 1 fi + if false then 2 else 3 fi;
    add_loop: X <- while false loop 1 pool + while false loop 2 pool;
    add_case: X <- case x of a: A => 1; esac + case x of b: B => 2; esac;
    add_let: X <- let a: A in 0 + 1 + let a: A in 2;
};
